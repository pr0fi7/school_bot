import re

from telegram import Update, ReplyKeyboardRemove
from telegram.ext import ContextTypes, MessageHandler, filters, ConversationHandler

from database.models import school_db

from .permissions import is_pupil, is_admin, is_teacher
from .keyboards import language_keyboard, registration_keyboard, cancel_button
from .admin import notify_all_admins

# Info for registration

NAME, SURNAME, LANGUAGE = range(3)

config = school_db.get_config('languages')
all_langs = config.get('languages', {})
valid_lang_texts = [f"{info['label']} {info['emoji']}" for info in all_langs.values()]
pattern = r'^(' + '|'.join(map(re.escape, valid_lang_texts)) + r')$'


# Connecting all buttons

async def show_registration_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é:",
        reply_markup=registration_keyboard
    )


# Signing up one by one: from name to language

async def handle_start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if is_pupil(user_id) or is_admin(user_id) or is_teacher(user_id):
        return ConversationHandler.END

    text = update.message.text
    if text == "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è —è–∫ —É—á–µ–Ω—å üìù":
        context.user_data['role'] = 'pupil'
        prompt = ("–í—ñ—Ç–∞—é! üëã\n"
                  "–°–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —è–∫ –í–∞—Å –∑–≤–∞—Ç–∏:")
    elif text == "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è —è–∫ –≤—á–∏—Ç–µ–ª—å üìù":
        context.user_data['role'] = 'teacher'
        prompt = ("–í—ñ—Ç–∞—é, –≤—á–∏—Ç–µ–ª—é! üëã\n"
                  "–°–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —è–∫ –í–∞—Å –∑–≤–∞—Ç–∏:")
    elif text == "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä üìù":
        context.user_data['role'] = 'admin'
        prompt = ("–í—ñ—Ç–∞—é, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É! üëã\n"
        "–°–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —è–∫ –í–∞—Å –∑–≤–∞—Ç–∏:")

    await update.message.reply_text(prompt, reply_markup=cancel_button)
    return NAME


async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text(f"–ß—É–¥–æ–≤–æ, {update.message.text}! üôå\n"
                                    f"–¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ:",
                                    reply_markup=cancel_button)
    return SURNAME


async def handle_surname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["surname"] = update.message.text
    role = context.user_data['role']

    if role == 'pupil':
        text = "–Ø–∫—É –º–æ–≤—É –í–∏ –º—Ä—ñ—î—Ç–µ –æ–ø–∞–Ω—É–≤–∞—Ç–∏? –û–±–∏—Ä–∞–π –∑—ñ —Å–ø–∏—Å–∫—É: ‚¨áÔ∏è"
    elif role == 'teacher':
        text = "–Ø–∫—É –º–æ–≤—É –í–∏ –ø–ª–∞–Ω—É—î—Ç–µ –≤–∏–∫–ª–∞–¥–∞—Ç–∏? –û–±–∏—Ä–∞–π –∑—ñ —Å–ø–∏—Å–∫—É: ‚¨áÔ∏è"
    elif role == 'admin':
        name = context.user_data["name"]
        surname = context.user_data["surname"]
        user_id = update.effective_user.id

        school_db.insert_admin(user_id, name, surname, admin_username=name)
        await update.message.reply_text(
            "–í—ñ—Ç–∞—î–º–æ –≤ –∫–æ–º–∞–Ω–¥—ñ! üéâ\n"
            "–í–∞—à–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –±–æ—Ç–æ–º.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    await update.message.reply_text(text, reply_markup=language_keyboard)
    return LANGUAGE



async def handle_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    name = context.user_data["name"]
    surname = context.user_data["surname"]
    role = context.user_data["role"]
    language = update.message.text.rsplit(" ", 1)[0]

    await update.message.reply_text(
        f"–î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, {name} {surname}!üéâ\n"
        f"–û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–æ—Ç—è–≥–æ–º –ø–µ–≤–Ω–æ–≥–æ —á–∞—Å—É‚è≥",
        reply_markup=ReplyKeyboardRemove()
    )

    if role == 'pupil':
        school_db.insert_pupil(user_id, name, surname, language)
    elif role == 'teacher':
        school_db.insert_teacher(user_id, name, surname, language)
    elif role == 'admin':
        school_db.insert_admin(user_id, name, surname, language)

    await notify_all_admins(
        bot=context.bot,
        name=name,
        surname=surname,
        role=role,
        language=language
    )

    return ConversationHandler.END


# Handlers for errors

async def handle_timeout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ ‚ùå",
        reply_markup=registration_keyboard
    )
    return ConversationHandler.END


async def handle_invalid_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û–±–µ—Ä–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–¥–Ω—É –∑ –º–æ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ ‚ö†Ô∏è",
        reply_markup=language_keyboard
    )
    return LANGUAGE


def register_registration(application):
    conv = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Text("–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è —è–∫ —É—á–µ–Ω—å üìù"), handle_start_registration),
            MessageHandler(filters.Text("–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è —è–∫ –≤—á–∏—Ç–µ–ª—å üìù"), handle_start_registration),
            MessageHandler(filters.Text("–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä üìù"), handle_start_registration),
        ],
        states={
            NAME: [
                MessageHandler(filters.Regex(r'^–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ ‚ùå$'), handle_timeout),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name),
            ],
            SURNAME: [
                MessageHandler(filters.Regex(r'^–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ ‚ùå$'), handle_timeout),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_surname),
            ],
            LANGUAGE: [
                MessageHandler(filters.Regex(r'^–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ ‚ùå$'), handle_timeout),
                MessageHandler(filters.Regex(pattern), handle_language),
                MessageHandler(filters.TEXT & ~filters.Regex(pattern), handle_invalid_language),
            ],
        },
        fallbacks=[
            MessageHandler(filters.Text("–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ ‚ùå"), handle_timeout)
        ],
        conversation_timeout=120
    )
    application.add_handler(conv)
