from datetime import datetime

import psycopg2
import psycopg2.extras
from dotenv import load_dotenv

from config.settings import db_params

load_dotenv()

# Dictionary for languages (if there is no info in config table below)
languages_config = {
    "languages": {
        "en": {
            "label": "Англійська",
            "emoji": "🇬🇧"
        },
    }
}


class Database:
    def __init__(self, conn_params):
        self.conn = psycopg2.connect(**conn_params)
        self._create_tables()

    # Create tables

    def _create_tables(self):
        with self.conn.cursor() as cursor:
            self.conn.autocommit = True
            try:
                cursor.execute('''
                    DO $$
                    BEGIN
                        IF NOT EXISTS (
                            SELECT 1 FROM pg_extension WHERE extname = 'pgcrypto'
                        ) THEN
                            CREATE EXTENSION pgcrypto;
                        END IF;
                    END
                    $$;
                ''')

                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS public.pupils (
                    pupil_id BIGINT PRIMARY KEY,
                    pupil_name VARCHAR(100) NOT NULL,
                    pupil_surname VARCHAR(100) NOT NULL,
                    languages_learning VARCHAR(255),
                    is_online BOOLEAN DEFAULT FALSE NOT NULL,
                    requests_to_admin JSONB,
                    birth_date DATE
                );''')

                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS public.teachers (
                    number INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
                    teacher_id BIGINT NOT NULL UNIQUE,
                    group_id   BIGINT GENERATED BY DEFAULT AS IDENTITY UNIQUE NOT NULL,
                    teacher_name VARCHAR(100) NOT NULL,
                    teacher_surname VARCHAR(100) NOT NULL,
                    languages_teaching VARCHAR(255),
                    telegram_invite VARCHAR(255),
                    requests_to_admin JSONB
                );''')

                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS public.admins (
                    admin_id BIGINT PRIMARY KEY,
                    admin_name VARCHAR(100) NOT NULL,
                    admin_surname VARCHAR(100) NOT NULL,
                    admin_username VARCHAR(100) NOT NULL UNIQUE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );''')

                cursor.execute('''
                                    CREATE TABLE IF NOT EXISTS public.config (
                                    name VARCHAR(100) PRIMARY KEY NOT NULL,
                                    config_file JSONB
                                );''')

                cursor.execute(
                    """
                    INSERT INTO public.config(name, config_file)
                    VALUES (%s, %s)
                    ON CONFLICT (name) DO NOTHING;
                    """,
                    (
                        'languages',
                        psycopg2.extras.Json(languages_config)
                    )
                )

                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS public.conversations (
                    conversation_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                    group_id BIGINT REFERENCES public.teachers(group_id) ON DELETE CASCADE,
                    branch_id BIGINT,
                    teacher_id BIGINT REFERENCES public.teachers(teacher_id) ON DELETE CASCADE,
                    pupil_id BIGINT REFERENCES public.pupils(pupil_id) ON DELETE CASCADE,
                    conversation JSONB,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );''')

            except Exception as e:
                print("Error creating tables:", e)
            finally:
                self.conn.autocommit = False

    # Admin queries

    def get_all_admins(self):
        with self.conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM public.admins")
            rows = cursor.fetchall()
            return [dict(row) for row in rows]

    # Config queries

    def get_config(self, name: str):
        with self.conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            cursor.execute(
                """SELECT * FROM public.config WHERE name  = %s""",
                (name,))
            row = cursor.fetchone()
            return row['config_file'] if row else None

    # Conversation queries

    def get_all_conversations(self):
        with self.conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM public.conversations")
            rows = cursor.fetchall()
            return [dict(row) for row in rows]

    def get_conversation(self, group_id: int, branch_id: int):
        with self.conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            cursor.execute(
                """SELECT * FROM public.conversations WHERE group_id  = %s AND branch_id = %s""",
                (group_id, branch_id))
            row = cursor.fetchone()
            return dict(row) if row else None

    def get_conversation_by_pupil(self, pupil_id: int):
        with self.conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            cursor.execute(
                """SELECT * FROM public.conversations WHERE pupil_id = %s""",
                (pupil_id,))
            row = cursor.fetchone()
            return dict(row) if row else None
        
    def get_conversation_by_teacher_and_pupil(self, teacher_id: int, pupil_id: int):
        """Fetch the single conversation linking this teacher & pupil, or None."""
        with self.conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            cursor.execute(
                """
                SELECT *
                  FROM public.conversations
                 WHERE teacher_id = %s
                   AND pupil_id   = %s
                """,
                (teacher_id, pupil_id)
            )
            row = cursor.fetchone()
            return dict(row) if row else None

    def insert_conversation(self, group_id, branch_id, teacher_id, pupil_id, conversation_data):
        with self.conn.cursor() as cursor:
            cursor.execute('''INSERT INTO public.conversations (group_id, branch_id, teacher_id, pupil_id, conversation)
                              VALUES (%s, %s, %s, %s, %s) RETURNING conversation_id;''',
                           (group_id, branch_id, teacher_id, pupil_id, psycopg2.extras.Json(conversation_data)))
            conversation_id = cursor.fetchone()[0]
            self.conn.commit()
            return conversation_id

    def update_conversation(self, conversation_id, conversation_data):
        with self.conn.cursor() as cursor:
            cursor.execute(
                '''UPDATE public.conversations SET conversation = %s WHERE conversation_id = %s;''',
                (psycopg2.extras.Json(conversation_data), conversation_id)
            )
            self.conn.commit()

    def delete_conversation(self, conversation_id):
        with self.conn.cursor() as cursor:
            cursor.execute(
                '''DELETE FROM public.conversations WHERE conversation_id = %s;''',
                (conversation_id,)
            )
            self.conn.commit()

    # JSONB-manipulation methods
    def append_conversation_message(self, conversation_id: str,
                                    sender: str, msg_type: str,
                                    content: str, message_id: int = None):
        entry = {
            "from": sender,
            "timestamp": datetime.utcnow().isoformat(),
            "type": msg_type,
            "content": content
        }
        if message_id is not None:
            entry["message_id"] = message_id

        with self.conn.cursor() as cursor:
            cursor.execute(
                """
                UPDATE public.conversations
                SET conversation =
                    CASE
                        WHEN conversation IS NULL THEN %s::jsonb
                        ELSE conversation || %s::jsonb
                    END
                WHERE conversation_id = %s;
                """,
                (
                    psycopg2.extras.Json([entry]),
                    psycopg2.extras.Json(entry),
                    conversation_id
                )
            )
            self.conn.commit()

    def get_conversation_messages(self, conversation_id: str) -> list:
        with self.conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            cursor.execute(
                "SELECT conversation FROM public.conversations WHERE conversation_id = %s;",
                (conversation_id,)
            )
            row = cursor.fetchone()
            return row['conversation'] if row and row['conversation'] is not None else []

    def clear_conversation_messages(self, conversation_id: str):
        with self.conn.cursor() as cursor:
            cursor.execute(
                "UPDATE public.conversations SET conversation = '[]' WHERE conversation_id = %s;",
                (conversation_id,)
            )
            self.conn.commit()

    # Pupil queries

    def get_all_pupils(self):
        with self.conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM public.pupils")
            rows = cursor.fetchall()
            return [dict(row) for row in rows]

    def get_pupil(self, pupil_id: int) -> dict | None:
        with self.conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            cursor.execute(
                "SELECT * FROM public.pupils WHERE pupil_id = %s",
                (pupil_id,)
            )
            row = cursor.fetchone()
            return dict(row) if row else None

    def update_pupil_online(self, online, pupil_id):
        with self.conn.cursor() as cursor:
            cursor.execute('''UPDATE public.pupils SET is_online = %s WHERE pupil_id = %s;''',
                           (online, pupil_id))
            self.conn.commit()

    def insert_pupil(self, pupil_id, pupil_name, pupil_surname, languages_learning):

        with self.conn.cursor() as cursor:
            cursor.execute('''INSERT INTO public.pupils (pupil_id, pupil_name, pupil_surname, languages_learning)
                              VALUES (%s, %s, %s, %s) RETURNING pupil_id;''',
                           (pupil_id, pupil_name, pupil_surname, languages_learning))
            pupil = cursor.fetchone()[0]
            self.conn.commit()
            return pupil
    
    def update_pupil_birthday(self, pupil_id: int, birth_date: str):
        with self.conn.cursor() as cursor:
            cursor.execute(
                '''UPDATE public.pupils SET birth_date = %s WHERE pupil_id = %s;''',
                (birth_date, pupil_id)
            )
            self.conn.commit()
            return pupil_id

    def delete_pupil(self, pupil_id):
        with self.conn.cursor() as cursor:
            cursor.execute('''DELETE FROM public.pupils WHERE pupil_id = %s;''', (pupil_id,))
            self.conn.commit()

    def get_pupil_requests(self, pupil_id: int) -> list:
        pupil = self.get_pupil(pupil_id)
        return pupil.get("requests_to_admin") or []

    def add_pupil_request(self, pupil_id: int, entry: dict):
        with self.conn.cursor() as cursor:
            cursor.execute(
                """
                UPDATE public.pupils
                SET requests_to_admin =
                  COALESCE(requests_to_admin, '[]'::jsonb)
                  || %s::jsonb
                WHERE pupil_id = %s;
                """,
                (psycopg2.extras.Json([entry]), pupil_id)
            )
            self.conn.commit()

    def clear_pupil_requests(self, pupil_id: int):
        with self.conn.cursor() as cur:
            cur.execute(
                "UPDATE public.pupils SET requests_to_admin = '[]' WHERE pupil_id = %s;",
                (pupil_id,)
            )
            self.conn.commit()

    # Teacher queries

    def get_all_teachers(self):
        with self.conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM public.teachers")
            rows = cursor.fetchall()
            return [dict(row) for row in rows]

    def get_teacher(self, teacher_id: int) -> dict | None:
        with self.conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            cursor.execute(
                "SELECT * FROM public.teachers WHERE teacher_id = %s",
                (teacher_id,)
            )
            row = cursor.fetchone()
            return dict(row) if row else None

    def update_teacher_group(self, teacher_id: int, new_group_id: int, telegram_invite: str):
        with self.conn.cursor() as cursor:
            cursor.execute(
                """UPDATE public.teachers SET group_id = %s, telegram_invite = %s WHERE teacher_id = %s;""",
                (new_group_id, telegram_invite, teacher_id)
            )
            self.conn.commit()

    def insert_teacher(self, teacher_id, teacher_name, teacher_surname, languages_teaching):
        with self.conn.cursor() as cursor:
            cursor.execute('''INSERT INTO public.teachers (teacher_id, teacher_name, teacher_surname, languages_teaching)
                              VALUES (%s, %s, %s, %s) RETURNING teacher_id;''',
                           (teacher_id, teacher_name, teacher_surname, languages_teaching))
            teacher = cursor.fetchone()[0]
            self.conn.commit()
            return teacher

    def delete_teacher(self, teacher_id):
        with self.conn.cursor() as cursor:
            cursor.execute('''DELETE FROM public.teachers WHERE teacher_id = %s;''', (teacher_id,))
            self.conn.commit()

    def get_teacher_requests(self, teacher_id: int) -> list:
        teacher = self.get_teacher(teacher_id)
        return teacher.get("requests_to_admin") or []

    def add_teacher_request(self, teacher_id: int, entry: dict):
        with self.conn.cursor() as cursor:
            cursor.execute(
                """
                UPDATE public.teachers
                SET requests_to_admin =
                  COALESCE(requests_to_admin, '[]'::jsonb)
                  || %s::jsonb
                WHERE teacher_id = %s;
                """,
                (psycopg2.extras.Json([entry]), teacher_id)
            )
            self.conn.commit()

    def clear_teacher_requests(self, teacher_id: int):
        with self.conn.cursor() as cur:
            cur.execute(
                "UPDATE public.teachers SET requests_to_admin = '[]' WHERE teacher_id = %s;",
                (teacher_id,)
            )
            self.conn.commit()

    def insert_admin(self, admin_id: int, admin_name: str, admin_surname: str, admin_username: str):
        with self.conn.cursor() as cursor:
            cursor.execute(
                '''INSERT INTO public.admins (admin_id, admin_name, admin_surname, admin_username)
                   VALUES (%s, %s, %s, %s) RETURNING admin_id;''',
                (admin_id, admin_name, admin_surname, admin_username))
            self.conn.commit()
            return admin_id


school_db = Database(db_params)
